{
    "collab_server" : "",
    "contents" : "library(plyr)\nlibrary(foreign)\n\n# Load the data sets\ntrain <- read.csv(\"Data/train.csv\", stringsAsFactors = FALSE)  # 891 obs\ntest <- read.csv(\"Data/test.csv\", stringsAsFactors = FALSE)    # 418 obs\n\n###\n### Data structures\n###\n\n# Create a survived variable in the test data set\n# Set \"0\" (did not survive) as the default value\ntest$survived <- 0\n\n# Convert catagorical variables to factors\ntrain$survived <- factor(train$survived)\ntrain$sex <- factor(train$sex)\ntrain$pclass <- factor(train$pclass)\ntest$survived <- factor(test$survived)\ntest$sex <- factor(test$sex)\ntest$pclass <- factor(test$pclass)\ntest$embarked <- factor(test$embarked)\n\n###\n### Fixing missing values\n###\n# 177 missing ages in TRAIN\n# 86 missing ages in TEST\n# 1 missing fare in TEST\n# 2 missing embarked in TRAIN\n\n# Combine the data sets for age/fare modeling\nfull <- join(test, train, type = \"full\")\n\n# Multiple Imputation\n#library(mi)\n#inf <- mi.info(train)\n#imp <- mi(train, info = inf, check.coef.convergence = FALSE, n.imp = 2, n.iter = 6, seed = 111)\n#plot(imp)\n\n# Create LM models for predicting missing values in AGE and FARE\nage.mod <- lm(age ~ pclass + sex +\n                sibsp + parch + fare, data = full)\nfare.mod<- lm(fare ~ pclass + sex +\n                sibsp + parch + age, data = full)\n\n# Replace missing values in AGE and FARE with prediction\ntrain$age[is.na(train$age)] <- predict(age.mod, train)[is.na(train$age)]\ntest$age[is.na(test$age)] <- predict(age.mod, test)[is.na(test$age)]\ntest$fare[is.na(test$fare)] <- predict(fare.mod, test)[is.na(test$fare)]\n\n# Random Forest to find missing values\n#full.age <- full[!is.na(full$age), ]  # Remove NA's\n#full.age$fare[is.na(full.age$fare)] <- predict(fare.mod, full.age)[is.na(full.age$fare)]\n\n#age.rf <- randomForest(age ~ pclass + sex + sibsp + parch + fare, data = full.age, ntree = 15000)\n#train$age[is.na(train$age)] <- predict(age.rf, train)[is.na(train$age)]\n#test$age[is.na(test$age)] <- predict(age.rf, test)[is.na(test$age)]\n\n# Replace missing values in embarked with most popular\ntrain$embarked[train$embarked == \"\"] <- \"S\"\ntrain$embarked <- factor(train$embarked)\n\n###\n### Create \"sex.name\" variable\"\n###\nlibrary(stringr)\ntrain$sex.name <- 0\ntest$sex.name <- 0\ntrain$sex.name[!is.na(str_extract(train$name, \"Mr\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Mrs\"))] <- \"Mrs\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Mme\"))] <- \"Mrs\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Miss\"))] <- \"Miss\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Ms\"))] <- \"Miss\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Mlle\"))] <- \"Miss\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Capt\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Major\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Col\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Master\"))] <- \"Mast\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Rev\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Dr\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Don\"))] <- \"Mr\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Countess\"))] <- \"Mrs\"\ntrain$sex.name[!is.na(str_extract(train$name, \"Jonkheer\"))] <- \"Mr\"\n\ntest$sex.name[!is.na(str_extract(test$name, \"Mr\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Mrs\"))] <- \"Mrs\"\ntest$sex.name[!is.na(str_extract(test$name, \"Mme\"))] <- \"Mrs\"\ntest$sex.name[!is.na(str_extract(test$name, \"Miss\"))] <- \"Miss\"\ntest$sex.name[!is.na(str_extract(test$name, \"Ms\"))] <- \"Miss\"\ntest$sex.name[!is.na(str_extract(test$name, \"Mlle\"))] <- \"Miss\"\ntest$sex.name[!is.na(str_extract(test$name, \"Capt\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Major\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Col\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Master\"))] <- \"Mast\"\ntest$sex.name[!is.na(str_extract(test$name, \"Rev\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Dr\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Don\"))] <- \"Mr\"\ntest$sex.name[!is.na(str_extract(test$name, \"Countess\"))] <- \"Mrs\"\ntest$sex.name[!is.na(str_extract(test$name, \"Jonkheer\"))] <- \"Mr\"\n\ntest$name[test$sex.name == 0]\ntrain$name[train$sex.name == 0]\n\ntrain$sex.name <- factor(train$sex.name)\ntest$sex.name <- factor(test$sex.name)\n\n###\n### Create \"fare-distance\" variable\n###\n\n# fare-distance = fare - mean(fare of pclass)\n# Are those who pay less than the average for a ticket less likely to survive?\n\n# Find the mean fare for each pclass\nclass1 <- subset(full, pclass == 1)\nclass2 <- subset(full, pclass == 2)\nclass3 <- subset(full, pclass == 3)\nfare1 <- mean(class1$fare, na.rm = TRUE)\nfare2 <- mean(class2$fare, na.rm = TRUE)\nfare3 <- mean(class3$fare, na.rm = TRUE)\n\n# Create fare_avg column\ntrain$fare_avg[train$pclass == 1] <- fare1\ntrain$fare_avg[train$pclass == 2] <- fare2\ntrain$fare_avg[train$pclass == 3] <- fare3\ntest$fare_avg[test$pclass == 1] <- fare1\ntest$fare_avg[test$pclass == 2] <- fare2\ntest$fare_avg[test$pclass == 3] <- fare3\n\n# Create fare-distance metric for Train\ntrain <- transform(train, fare.distance = fare - fare_avg)\ntrain <- train[, !names(train) %in% c(\"fare_avg\")]\n\n# Create fare-distance metric for Test\ntest <- transform(test, fare.distance = fare - fare_avg)\ntest <- test[, !names(test) %in% c(\"fare_avg\")]\n\n###\n### Add family column\n###\ntrain$family <- NA\ntest$family <- NA\ntrain$family[which(train$sibsp != 0 | train$parch != 0)] <- 1\ntrain$family[which(train$sibsp == 0 & train$parch == 0)] <- 0\ntest$family[which(test$sibsp != 0 | test$parch != 0)] <- 1\ntest$family[which(test$sibsp == 0 & test$parch == 0)] <- 0\ntest$family <- factor(test$family)\ntrain$family <- factor(train$family)\ntest$familia <- test$sibsp + test$parch\ntrain$familia <- train$sibsp + train$parch\n\n### \n###  Scale the non factors\n###\ntrain$age_scale <- (train$age-min(train$age))/(max(train$age-min(train$age)))\ntrain$fare_scale <- (train$fare-min(train$fare))/(max(train$fare-min(train$fare)))\n\ntest$age_scale <- (test$age-min(test$age))/(max(test$age-min(test$age)))\ntest$fare_scale <- (test$fare-min(test$fare))/(max(test$fare-min(test$fare)))\n",
    "created" : 1484485045365.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3429687646",
    "id" : "1068FB6C",
    "lastKnownWriteTime" : 1484821534,
    "last_content_update" : 1484821534365,
    "path" : "D:/R_projects/Final_Lab/nnet.R",
    "project_path" : "nnet.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}